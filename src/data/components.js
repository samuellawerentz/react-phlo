export const components = {
  api_id: '2430b1ec-218a-4326-b335-74b6f3f7dd64',
  message: '',
  data: {
    default_canvas: [
      {
        category: 'Default',
        component_color: '#2CB031',
        components: [
          {
            class: 'start',
            color: '#00695C',
            component: 'start',
            config: {
              dynamic_states: true,
              model: [
                {
                  data: { name: null },
                  inputType: 'text',
                  label: 'Name',
                  type: 'text',
                  validation: 'required',
                },
                {
                  data: { triggers: ['call'] },
                  inputType: 'checkbox',
                  key: 'triggers',
                  label: 'Triggers',
                  type: 'triggers',
                  validation: '',
                },
                {
                  data: { events: { hangup: { method: 'POST', url: '' } } },
                  inputType: 'events',
                  key: 'events',
                  label: 'Event Callbacks',
                  type: 'events',
                  validation: '',
                },
                {
                  data: { payload_format: {} },
                  inputType: 'checkbox',
                  key: 'payload_format',
                  label: '',
                  type: 'payload_format',
                  validation: '',
                },
                {
                  data: {
                    record_start: {
                      file: '',
                      language: 'en-US',
                      prompt_speak_type: 'basic',
                      prompt_type: 'speak',
                      text: 'This call is being recorded',
                      url: '',
                      voice: 'WOMAN',
                    },
                  },
                  inputType: 'prompt',
                  key: 'record_start',
                  label: '',
                  type: 'record_start',
                  validation: 'required',
                },
                {
                  data: {
                    record_stop: {
                      file: '',
                      language: 'en-US',
                      prompt_speak_type: 'basic',
                      prompt_type: 'speak',
                      text: 'Call recording stopped',
                      url: '',
                      voice: 'WOMAN',
                    },
                  },
                  inputType: 'prompt',
                  key: 'record_stop',
                  label: '',
                  type: 'record_stop',
                  validation: 'required',
                },
              ],
              output_states: [
                { default: false, id: 'message', name: 'Incoming Message', selected: true },
                { default: false, id: 'call', name: 'Incoming Call', selected: true },
                { default: false, id: 'chat', name: 'Incoming Chat', selected: true },
              ],
            },
            description: 'Flow starts executing from this node.',
            error: {
              errorClass: '',
              errorMessage: '',
              errorShowClass: '',
              errorTextClass: '',
              errors: {},
              isSaveErrored: false,
            },
            icon: 'https://d2wsqfbujo4jlg.cloudfront.net/component_icons/start_2CB031.svg',
            input: false,
            left: 0,
            name: 'Start',
            node_vars: {
              _component: ['request_type'],
              call: [
                'uuid',
                'to',
                'from',
                'direction',
                'to_iso2',
                'from_iso2',
                'to_country',
                'from_country',
                'leg',
                'bill_rate',
                'header1',
                'header2',
                'header3',
                'header4',
                'header5',
              ],
              chat: [
                'chat_uuid',
                'from',
                'customer_user_status',
                'from_iso2',
                'from_country',
                'customer_email',
                'customer_phone',
              ],
              message: [
                'message_uuid',
                'direction',
                'status',
                'to',
                'from',
                'to_iso2',
                'from_iso2',
                'to_country',
                'from_country',
                'msg',
                'units',
                'total_rate',
                'total_amount',
                'type',
                'media_count',
                'media_urls',
                'media_url0',
                'media_url1',
                'media_url2',
                'media_url3',
                'media_url4',
                'media_url5',
                'media_url6',
                'media_url7',
                'media_url8',
                'media_url9',
              ],
            },
            summary: { isShownClass: 'none', text: '' },
            tip: { title: 'Drag and Drop nodes' },
            top: 0,
            type: 'start',
          },
        ],
      },
    ],
    palettes: [
      {
        category: 'Voice',
        component_color: '#9B51E0',
        components: [
          {
            class: 'component',
            color: '#3F51B5',
            component: 'ivrmenu',
            config: {
              dynamic_states: true,
              model: [
                {
                  data: { name: null },
                  inputType: 'text',
                  label: 'Name',
                  type: 'text',
                  validation: 'required',
                },
                {
                  data: { allowed_inputs: ['#'] },
                  inputType: 'list',
                  key: 'allowed_inputs',
                  label: 'Allowed Inputs',
                  type: 'allowed_inputs',
                  validation: '',
                },
                {
                  data: { input_timeout: 5 },
                  inputType: 'number',
                  key: 'input_timeout',
                  label: 'Input Timeout in seconds',
                  type: 'input_timeout',
                  validation: 'numeric',
                },
                {
                  data: { interrupt: true },
                  inputType: 'checkbox',
                  key: 'interrupt',
                  label: 'Interrupt Audio on Input',
                  type: 'interrupt',
                  validation: '',
                },
                {
                  data: {
                    prompt: [
                      {
                        delay: 0,
                        file: '',
                        language: 'en-US',
                        prompt_speak_type: 'basic',
                        prompt_type: 'speak',
                        text: '',
                        url: '',
                        voice: 'WOMAN',
                      },
                    ],
                  },
                  inputType: 'prompt',
                  key: 'prompt',
                  label: '',
                  type: 'prompt',
                  validation: 'required',
                },
                {
                  data: { events: { digits: { method: 'POST', url: '' } } },
                  inputType: 'events',
                  key: 'events',
                  label: 'Event Callbacks',
                  type: 'events',
                  validation: '',
                },
              ],
              output_states: [
                { default: true, id: 'no_input', name: 'No Input', selected: true },
                { default: true, id: 'wrong_input', name: 'Wrong Input', selected: true },
                { default: false, id: '1', name: '1', selected: false },
                { default: false, id: '2', name: '2', selected: false },
                { default: false, id: '3', name: '3', selected: false },
                { default: false, id: '4', name: '4', selected: false },
                { default: false, id: '5', name: '5', selected: false },
                { default: false, id: '6', name: '6', selected: false },
                { default: false, id: '7', name: '7', selected: false },
                { default: false, id: '8', name: '8', selected: false },
                { default: false, id: '9', name: '9', selected: false },
                { default: false, id: '#', name: '#', selected: false },
                { default: false, id: '0', name: '0', selected: false },
                { default: false, id: '*', name: '*', selected: false },
              ],
            },
            description: 'Interative voice response menu',
            error: {
              errorClass: '',
              errorMessage: '',
              errorShowClass: '',
              errorTextClass: '',
              errors: {},
              isSaveErrored: false,
            },
            icon: 'https://d2wsqfbujo4jlg.cloudfront.net/component_icons/ivr_menu_9B51E0.svg',
            input: true,
            name: 'IVR Menu',
            node_vars: { _component: ['digits'] },
            summary: { isShownClass: 'none', text: '' },
            tip: { title: 'Drag and Drop nodes' },
            type: 'ivr_menu',
          },
          {
            class: 'component',
            color: '#3F51B5',
            component: 'getinput',
            config: {
              dynamic_states: false,
              model: [
                {
                  data: { name: null },
                  inputType: 'text',
                  label: 'Name',
                  type: 'text',
                  validation: 'required',
                },
                {
                  data: {
                    prompt: [
                      {
                        delay: 0,
                        file: '',
                        language: 'en-US',
                        prompt_speak_type: 'basic',
                        prompt_type: 'speak',
                        text: '',
                        url: '',
                        voice: 'WOMAN',
                      },
                    ],
                  },
                  inputType: 'prompt',
                  key: 'prompt',
                  label: '',
                  type: 'prompt',
                  validation: 'required',
                },
                {
                  data: [
                    {
                      data: { input_timeout: 5 },
                      inputType: 'number',
                      key: 'input_timeout',
                      label: 'Input Timeout in seconds',
                      type: 'input_timeout',
                      validation: 'numeric',
                    },
                    {
                      data: { max_input_size: 99 },
                      inputType: 'number',
                      key: 'max_input_size',
                      label: 'Max Input Size',
                      type: 'max_input_size',
                      validation: 'required',
                    },
                    {
                      data: { interrupt: true },
                      inputType: 'checkbox',
                      key: 'interrupt',
                      label: 'Interrupt Audio on Input',
                      type: 'interrupt',
                      validation: '',
                    },
                  ],
                  inputType: 'settings',
                  label: 'Settings',
                  tab: null,
                  type: 'settings',
                  validation: '',
                },
                {
                  data: { events: { digits: { method: 'POST', url: '' } } },
                  inputType: 'events',
                  key: 'events',
                  label: 'Event Callbacks',
                  type: 'events',
                  validation: '',
                },
              ],
              output_states: [
                { default: true, id: 'input_success', name: 'Successful Input', selected: true },
                { default: true, id: 'no_input', name: 'No Input', selected: true },
              ],
            },
            description: 'Get Input from User',
            error: {
              errorClass: '',
              errorMessage: '',
              errorShowClass: '',
              errorTextClass: '',
              errors: {},
              isSaveErrored: false,
            },
            icon: 'https://d2wsqfbujo4jlg.cloudfront.net/component_icons/get_input_9B51E0.svg',
            input: true,
            name: 'Get Input',
            node_vars: { _component: ['input', 'input_type'] },
            summary: { isShownClass: 'none', text: '' },
            tip: { title: 'Drag and Drop nodes' },
            type: 'get_input',
          },
          {
            class: 'component',
            color: '#3F51B5',
            component: 'initiatecall',
            config: {
              dynamic_states: true,
              model: [
                {
                  data: { name: null },
                  inputType: 'text',
                  label: 'Name',
                  type: 'text',
                  validation: 'required',
                },
                {
                  data: { from: '' },
                  inputType: 'text',
                  key: 'from',
                  label: 'From',
                  type: 'text_auto',
                  validation: 'required|min:7',
                },
                {
                  data: { to: '' },
                  inputType: 'list',
                  key: 'to',
                  label: 'To',
                  type: 'tagger',
                  validation: 'required|min:7|checkTagger',
                },
                {
                  data: [
                    {
                      data: { send_digits: '' },
                      inputType: 'text',
                      key: 'send_digits',
                      label: 'Send as input when call is answered',
                      type: 'send_digits',
                      validation: '',
                    },
                    {
                      data: { ring_timeout: 30 },
                      inputType: 'number',
                      key: 'ring_timeout',
                      label: 'Disconnect call after ringing for (seconds)',
                      type: 'ring_timeout',
                      validation: 'required',
                    },
                    {
                      data: { detect_voicemail: false },
                      inputType: 'checkbox',
                      key: 'detect_voicemail',
                      label: 'Enable Voicemail Detection',
                      type: 'detect_voicemail',
                      validation: '',
                    },
                  ],
                  inputType: 'settings',
                  label: 'Settings',
                  tab: null,
                  type: 'settings',
                  validation: '',
                },
                {
                  data: { record: { record: false, record_value: '' } },
                  inputType: 'checkbox',
                  key: 'record',
                  label: 'Record calls',
                  type: 'record',
                  validation: '',
                },
                {
                  data: { extra_headers: '' },
                  inputType: 'textarea',
                  key: 'extra_headers',
                  label: 'Custom Headers',
                  type: 'textarea_auto',
                  validation: '',
                },
                {
                  data: {
                    events: {
                      answer: { method: 'POST', url: '' },
                      hangup: { method: 'POST', url: '' },
                      machine_detection: { method: 'POST', url: '' },
                      record: { method: 'POST', url: '' },
                      ringing: { method: 'POST', url: '' },
                    },
                  },
                  inputType: 'events',
                  key: 'events',
                  label: 'Event Callbacks',
                  type: 'events',
                  validation: '',
                },
              ],
              output_states: [
                { default: true, id: 'answered', name: 'Answered', selected: true },
                { default: true, id: 'no_answer', name: 'No Answer', selected: true },
                { default: true, id: 'busy_rejected', name: 'Busy/Rejected', selected: true },
                { default: true, id: 'failed', name: 'Failed', selected: true },
                { default: false, id: 'voicemail', name: 'Voicemail', selected: false },
              ],
            },
            description: 'Initiate a call to a user',
            error: {
              errorClass: '',
              errorMessage: '',
              errorShowClass: '',
              errorTextClass: '',
              errors: {},
              isSaveErrored: false,
            },
            icon: 'https://d2wsqfbujo4jlg.cloudfront.net/component_icons/initiate_call_9B51E0.svg',
            input: true,
            name: 'Initiate Call',
            node_vars: {
              _component: [
                'uuid',
                'to',
                'from',
                'direction',
                'from_iso2',
                'from_country',
                'leg',
                'bill_rate',
                'voicemail_detected',
                'call_status',
              ],
            },
            summary: { isShownClass: 'none', text: '' },
            tip: { title: 'Drag and Drop nodes' },
            type: 'initiate_call',
          },
          {
            class: 'component',
            color: '#3F51B5',
            component: 'hangup',
            config: {
              dynamic_states: false,
              model: [
                {
                  data: { name: null },
                  inputType: 'text',
                  label: 'Name',
                  type: 'text',
                  validation: 'required',
                },
                {
                  data: { reason: 'rejected' },
                  inputType: 'text',
                  key: 'reason',
                  label: 'Hangup Reason',
                  type: 'select',
                  validation: 'required',
                },
              ],
              output_states: [],
            },
            description: 'Hangup an on-going call',
            error: {
              errorClass: '',
              errorMessage: '',
              errorShowClass: '',
              errorTextClass: '',
              errors: {},
              isSaveErrored: false,
            },
            icon: 'https://d2wsqfbujo4jlg.cloudfront.net/component_icons/hangup_9B51E0.svg',
            input: true,
            name: 'Hangup',
            node_vars: { _component: [] },
            summary: { isShownClass: 'none', text: '' },
            tip: { title: 'Drag and Drop nodes' },
            type: 'hangup',
          },
          {
            class: 'component',
            color: '#3F51B5',
            component: 'prompt',
            config: {
              dynamic_states: false,
              model: [
                {
                  data: { name: null },
                  inputType: 'text',
                  label: 'Name',
                  type: 'text',
                  validation: 'required',
                },
                {
                  data: {
                    prompt: [
                      {
                        delay: 0,
                        file: '',
                        language: 'en-US',
                        loops: 0,
                        prompt_speak_type: 'basic',
                        prompt_type: 'speak',
                        text: '',
                        url: '',
                        voice: 'WOMAN',
                      },
                    ],
                  },
                  inputType: 'prompt',
                  key: 'prompt',
                  label: '',
                  type: 'prompt',
                  validation: 'required',
                },
              ],
              output_states: [
                { default: true, id: 'prompt_completed', name: 'Prompt completed', selected: true },
              ],
            },
            description: 'Speak/Play audio to a user',
            error: {
              errorClass: '',
              errorMessage: '',
              errorShowClass: '',
              errorTextClass: '',
              errors: {},
              isSaveErrored: false,
            },
            icon: 'https://d2wsqfbujo4jlg.cloudfront.net/component_icons/prompt_9B51E0.svg',
            input: true,
            name: 'Play Audio',
            node_vars: { _component: [] },
            summary: { isShownClass: 'none', text: '' },
            tip: { title: 'Drag and Drop nodes' },
            type: 'prompt',
          },
          {
            class: 'component',
            color: '#3F51B5',
            component: 'voicemail',
            config: {
              dynamic_states: false,
              model: [
                {
                  data: { name: null },
                  inputType: 'text',
                  label: 'Name',
                  type: 'text',
                  validation: 'required',
                },
                {
                  data: {
                    prompt: {
                      delay: 0,
                      file: '',
                      language: 'en-US',
                      prompt_type: 'speak',
                      text: '',
                      url: '',
                      voice: 'WOMAN',
                    },
                  },
                  inputType: 'prompt',
                  key: 'prompt',
                  label: '',
                  type: 'prompt',
                  validation: 'required',
                },
                {
                  data: { play_beep: true },
                  inputType: 'checkbox',
                  key: 'play_beep',
                  label: 'Play beep after audio',
                  type: 'checkbox',
                  validation: '',
                },
                {
                  data: {
                    transcription_type: { transcription_type: 'none', transcription_url: '' },
                  },
                  inputType: 'checkbox',
                  key: 'transcription_type',
                  label: 'Transcribe recording:',
                  type: 'transcription_type',
                  validation: 'required',
                },
                {
                  data: [
                    {
                      data: { voicemail_timeout: 15 },
                      inputType: 'number',
                      key: 'voicemail_timeout',
                      label: 'End recording on silence',
                      type: 'voicemail_timeout',
                      validation: 'numeric',
                    },
                    {
                      data: { voicemail_length: 300 },
                      inputType: 'number',
                      key: 'voicemail_length',
                      label: 'Voicemail length',
                      type: 'voicemail_length',
                      validation: 'numeric',
                    },
                    {
                      data: { end_recording: '*' },
                      inputType: 'end_recording',
                      key: 'end_recording',
                      label: 'End recording on digit',
                      type: 'end_recording',
                      validation: 'required',
                    },
                  ],
                  inputType: 'settings',
                  label: 'Settings',
                  tab: null,
                  type: 'settings',
                  validation: '',
                },
                {
                  data: { events: { record: { method: 'POST', url: '' } } },
                  inputType: 'events',
                  key: 'events',
                  label: 'Event Callbacks',
                  type: 'events',
                  validation: '',
                },
              ],
              output_states: [
                {
                  default: true,
                  id: 'recording_completed',
                  name: 'Recording Completed',
                  selected: true,
                },
              ],
            },
            description: 'Record voicemail on a call',
            error: {
              errorClass: '',
              errorMessage: '',
              errorShowClass: '',
              errorTextClass: '',
              errors: {},
              isSaveErrored: false,
            },
            icon: 'https://d2wsqfbujo4jlg.cloudfront.net/component_icons/voicemail_9B51E0.svg',
            input: true,
            name: 'Record Audio',
            node_vars: {
              _component: [
                'call_uuid',
                'digits',
                'recording_url',
                'recording_uuid',
                'recording_duration',
                'recording_start_time',
                'recording_end_time',
              ],
            },
            summary: { isShownClass: 'none', text: '' },
            tip: { title: 'Drag and Drop nodes' },
            type: 'voicemail',
          },
          {
            class: 'component',
            color: '#3F51B5',
            component: 'queueandroute',
            config: {
              dynamic_states: true,
              model: [
                {
                  data: { name: null },
                  inputType: 'text',
                  label: 'Name',
                  type: 'text',
                  validation: 'required',
                },
                {
                  data: { queue: '' },
                  inputType: 'queue',
                  key: 'queue',
                  label: 'Select Queue',
                  type: 'queue',
                  validation: 'required',
                },
                {
                  data: [
                    {
                      data: { routing_teams: '' },
                      inputType: 'list',
                      key: 'routing_teams',
                      label: 'Assign To',
                      type: 'routing_teams',
                      validation: '',
                    },
                    {
                      data: { routing_skills_filter: [] },
                      inputType: 'list',
                      key: 'routing_skills_filter',
                      label: 'Skill Filters',
                      type: 'routing_skills_filter',
                      validation: '',
                    },
                  ],
                  inputType: 'routing_team_manager',
                  label: '',
                  tab: null,
                  type: 'routing_team_manager',
                  validation: '',
                },
                {
                  data: { routing: 'Availability' },
                  inputType: 'routing',
                  key: 'routing',
                  label: 'Routing Strategy',
                  type: 'routing',
                  validation: 'required',
                },
                {
                  data: { agent_limit: 3 },
                  inputType: 'text',
                  key: 'agent_limit',
                  label: 'Assignment Reservation',
                  type: 'agent_limit',
                  validation: 'required',
                },
                {
                  data: { retry_limit: 0 },
                  inputType: 'retry_limit',
                  key: 'retry_limit',
                  label: 'Assignment Retry',
                  tab: null,
                  type: 'retry_limit',
                  validation: 'required',
                },
              ],
              output_states: [
                { default: true, id: 'completed', name: 'Completed', selected: true },
                { default: true, id: 'enqueue_failed', name: 'Enqueue Failed', selected: true },
                { default: true, id: 'timeout', name: 'Wait Timeout', selected: true },
                {
                  default: true,
                  id: 'assignment_failed',
                  name: 'Assignment Failed',
                  selected: true,
                },
                { default: false, id: '1', name: '1', selected: false },
                { default: false, id: '2', name: '2', selected: false },
                { default: false, id: '3', name: '3', selected: false },
                { default: false, id: '4', name: '4', selected: false },
                { default: false, id: '5', name: '5', selected: false },
                { default: false, id: '6', name: '6', selected: false },
                { default: false, id: '7', name: '7', selected: false },
                { default: false, id: '8', name: '8', selected: false },
                { default: false, id: '9', name: '9', selected: false },
                { default: false, id: '#', name: '#', selected: false },
                { default: false, id: '0', name: '0', selected: false },
                { default: false, id: '*', name: '*', selected: false },
              ],
            },
            description: 'Create/Manage call enqueue and dequeue.',
            error: {
              errorClass: '',
              errorMessage: '',
              errorShowClass: '',
              errorTextClass: '',
              errors: {},
              isSaveErrored: false,
            },
            icon: 'https://d2wsqfbujo4jlg.cloudfront.net/component_icons/queue_and_route_9B51E0.svg',
            input: true,
            name: 'Queue and Route',
            node_vars: { _component: ['next_state'] },
            summary: { isShownClass: 'none', text: '' },
            tip: { title: 'Drag and Drop nodes' },
            type: 'queue_and_route',
          },
          {
            class: 'component',
            color: '#3F51B5',
            component: 'queue',
            config: {
              dynamic_states: false,
              model: [
                {
                  data: { name: null },
                  inputType: 'text',
                  label: 'Name',
                  type: 'text',
                  validation: 'required',
                },
                {
                  data: [
                    {
                      data: { queue_priority: 5 },
                      inputType: 'priority',
                      key: 'queue_priority',
                      label: 'Queue Priority',
                      type: 'queue_priority',
                      validation: 'required',
                    },
                    {
                      data: { dequeue_order: 'first-in-first-out' },
                      inputType: 'dequeue_order',
                      key: 'dequeue_order',
                      label: 'Dequeue Order',
                      type: 'dequeue_order',
                      validation: '',
                    },
                    {
                      data: { queue_capacity: 1 },
                      inputType: 'queue_capacity',
                      key: 'queue_capacity',
                      label: 'Queue Capacity',
                      type: 'queue_capacity',
                      validation: 'required',
                    },
                  ],
                  inputType: 'queue_settings',
                  label: 'Queue Settings',
                  tab: 'queue',
                  type: 'queue_settings',
                  validation: '',
                },
                {
                  data: [
                    {
                      data: { channel: ['call'] },
                      inputType: 'checkbox',
                      key: 'channel',
                      label: 'Supported Channels',
                      tab: 'channel',
                      type: 'channel',
                      validation: '',
                    },
                    {
                      data: { queue_call_timeout: 20 },
                      inputType: 'queue_call_timeout',
                      key: 'queue_call_timeout',
                      label: 'Timeout(sec)',
                      type: 'queue_call_timeout',
                      validation: 'required',
                    },
                    {
                      data: {
                        prompt: [
                          {
                            file: '',
                            language: '',
                            loop_with_others: false,
                            loops: 0,
                            prompt_speak_type: 'basic',
                            prompt_type: 'play',
                            text: '',
                            url: '',
                            voice: '',
                          },
                        ],
                      },
                      inputType: 'prompt',
                      key: 'prompt',
                      label: '',
                      type: 'prompt',
                      validation: 'required',
                    },
                    {
                      data: { queue_call_allowed_inputs: ['#'] },
                      inputType: 'list',
                      key: 'queue_call_allowed_inputs',
                      label: 'Key Presses to exit queue',
                      type: 'queue_call_allowed_inputs',
                      validation: '',
                    },
                    {
                      data: {
                        chat_config: {
                          post_agent_assignment_message: '<chat.agent.name> has joined the chat',
                          pre_agent_assignment_message:
                            'Please hold as we find an agent to help you. Thanks for your patience.',
                          queue_chat_timeout: 20,
                        },
                      },
                      inputType: 'chat_config',
                      key: 'chat_config',
                      label: '',
                      type: 'chat_config',
                      validation: '',
                    },
                  ],
                  inputType: 'channel_settings',
                  label: 'channels',
                  tab: 'channel',
                  type: 'channel_settings',
                  validation: '',
                },
              ],
              output_states: null,
            },
            description: 'Create/Manage call enqueue and dequeue.',
            error: {
              errorClass: '',
              errorMessage: '',
              errorShowClass: '',
              errorTextClass: '',
              errors: {},
              isSaveErrored: false,
            },
            icon: 'https://d2wsqfbujo4jlg.cloudfront.net/component_icons/queue_9B51E0.svg',
            input: true,
            name: 'Queue',
            node_vars: { _component: [] },
            summary: { isShownClass: 'none', text: '' },
            tip: { title: 'Drag and Drop nodes' },
            type: 'queue',
          },
        ],
      },
      {
        category: 'Messaging',
        component_color: '#193FC2',
        components: [
          {
            class: 'component',
            color: '#00BCD4',
            component: 'sendmessage',
            config: {
              dynamic_states: true,
              model: [
                {
                  data: { name: null },
                  inputType: 'text',
                  label: 'Name',
                  type: 'text',
                  validation: 'required',
                },
                {
                  data: { from: '' },
                  inputType: 'text',
                  key: 'from',
                  label: 'From',
                  type: 'text_auto',
                  validation: 'required|min:7',
                },
                {
                  data: { to: '' },
                  inputType: 'list',
                  key: 'to',
                  label: 'To',
                  type: 'tagger',
                  validation: 'required|min:7|checkTagger',
                },
                {
                  data: { text: '' },
                  inputType: 'text',
                  key: 'text',
                  label: 'Message',
                  type: 'textarea_auto',
                  validation: '',
                },
                {
                  data: { media: '' },
                  inputType: 'list',
                  key: 'media',
                  label: 'Media Urls',
                  type: 'media',
                  validation: '',
                },
                {
                  data: [
                    {
                      data: { log_text: true },
                      inputType: 'checkbox',
                      key: 'log_text',
                      label: 'Log message content',
                      type: 'log_text',
                      validation: '',
                    },
                  ],
                  inputType: 'settings',
                  label: 'Settings',
                  tab: null,
                  type: 'settings',
                  validation: '',
                },
                {
                  data: {
                    events: {
                      delivered: { method: 'POST', url: '' },
                      failed: { method: 'POST', url: '' },
                      queued: { method: 'POST', url: '' },
                      sent: { method: 'POST', url: '' },
                      undelivered: { method: 'POST', url: '' },
                    },
                  },
                  inputType: 'events',
                  key: 'events',
                  label: 'Event Callbacks',
                  type: 'events',
                  validation: '',
                },
              ],
              output_states: [
                { default: true, id: 'sent', name: 'Sent', selected: true },
                { default: true, id: 'failed', name: 'Failed', selected: true },
              ],
            },
            description: 'Send a Message to a user',
            error: {
              errorClass: '',
              errorMessage: '',
              errorShowClass: '',
              errorTextClass: '',
              errors: {},
              isSaveErrored: false,
            },
            icon: 'https://d2wsqfbujo4jlg.cloudfront.net/component_icons/send_message_193FC2.svg',
            input: true,
            name: 'Send Message',
            node_vars: {
              _component: [
                'message_uuid',
                'direction',
                'status',
                'error_code',
                'to',
                'from',
                'from_iso2',
                'from_country',
                'units',
                'total_rate',
                'total_amount',
                'type',
                'media_count',
                'media_urls',
              ],
            },
            summary: { isShownClass: 'none', text: '' },
            tip: { title: 'Drag and Drop nodes' },
            type: 'send_message',
          },
        ],
      },
      {
        category: 'Chat',
        component_color: '#56CCF2',
        components: [
          {
            class: 'component',
            color: '#56CCF2',
            component: 'sendchat',
            config: {
              dynamic_states: true,
              model: [
                {
                  data: { name: null },
                  inputType: 'text',
                  label: 'Name',
                  type: 'text',
                  validation: 'required',
                },
                {
                  data: { text: '' },
                  inputType: 'text',
                  key: 'text',
                  label: 'Message',
                  type: 'textarea_auto',
                  validation: '',
                },
              ],
              output_states: [
                { default: true, id: 'sent', name: 'Sent', selected: true },
                { default: true, id: 'failed', name: 'Failed', selected: true },
              ],
            },
            description: 'Send chat message to the contact',
            error: {
              errorClass: '',
              errorMessage: '',
              errorShowClass: '',
              errorTextClass: '',
              errors: {},
              isSaveErrored: false,
            },
            icon: 'https://d2wsqfbujo4jlg.cloudfront.net/component_icons/send_chat_56CCF2.svg',
            input: true,
            name: 'Send Chat',
            node_vars: { _component: ['status'] },
            summary: { isShownClass: 'none', text: '' },
            tip: { title: 'Drag and Drop nodes' },
            type: 'send_chat',
          },
        ],
      },
      {
        category: 'Functions',
        component_color: '#FFB012',
        components: [
          {
            class: 'component',
            color: '#795548',
            component: 'httprequest',
            config: {
              dynamic_states: true,
              model: [
                {
                  data: { name: null },
                  inputType: 'text',
                  label: 'Name',
                  type: 'text',
                  validation: 'required',
                },
                {
                  data: {
                    http_request: {
                      auth_params: '{}',
                      auth_type: 'no_auth',
                      body: '{}',
                      body_type: 'form_data',
                      headers: '{}',
                      method: 'get',
                      oauth2_details: {
                        access_token_url: '',
                        client_id: '',
                        client_secret: '',
                        grant_type: 'client_credentials',
                        password: '',
                        scope: '',
                        username: '',
                      },
                      params: '{}',
                      response_format: '{}',
                      response_type: 'text/html',
                      retry_limit: 0,
                      settings: null,
                      timeout_ms: 1000,
                      url: '',
                    },
                  },
                  inputType: 'http_request',
                  key: 'http_request',
                  label: 'HTTP REQUEST',
                  type: 'http_request',
                  validation: 'required',
                },
              ],
              output_states: [
                { default: true, id: 'success', name: 'Success', selected: true },
                { default: true, id: 'failed', name: 'Failed', selected: true },
              ],
            },
            description: 'Make an HTTP request',
            error: {
              errorClass: '',
              errorMessage: '',
              errorShowClass: '',
              errorTextClass: '',
              errors: {},
              isSaveErrored: false,
            },
            icon: 'https://d2wsqfbujo4jlg.cloudfront.net/component_icons/http_request_FFB012.svg',
            input: true,
            name: 'HTTP Request',
            node_vars: { _component: ['content_type', 'response', 'status_code'] },
            summary: { isShownClass: 'none', text: '' },
            tip: { title: 'Drag and Drop nodes' },
            type: 'http_request',
          },
          {
            class: 'component',
            color: '#3F51B5',
            component: 'counter',
            config: {
              dynamic_states: true,
              model: [
                {
                  data: { name: null },
                  inputType: 'text',
                  label: 'Name',
                  type: 'text',
                  validation: 'required',
                },
                {
                  data: { max_count: 1 },
                  inputType: 'number',
                  key: 'max_count',
                  label: 'Increment the count until it reaches',
                  type: 'max_count',
                  validation: 'numeric',
                },
              ],
              output_states: [
                { default: true, id: 'count_limit_reached', name: 'Count Reached', selected: true },
                {
                  default: true,
                  id: 'count_limit_not_reached',
                  name: 'Count Not Reached',
                  selected: true,
                },
              ],
            },
            description: 'Branch based on the number of times the counter is executed.',
            error: {
              errorClass: '',
              errorMessage: '',
              errorShowClass: '',
              errorTextClass: '',
              errors: {},
              isSaveErrored: false,
            },
            icon: 'https://d2wsqfbujo4jlg.cloudfront.net/component_icons/counter_FFB012.svg',
            input: true,
            name: 'Counter',
            node_vars: { _component: [] },
            summary: { isShownClass: 'none', text: '' },
            tip: { title: 'Drag and Drop nodes' },
            type: 'counter',
          },
          {
            class: 'component',
            color: '#3F51B5',
            component: 'branch',
            config: {
              dynamic_states: true,
              model: [
                {
                  data: { name: null },
                  inputType: 'text',
                  label: 'Name',
                  type: 'text',
                  validation: 'required',
                },
                {
                  data: { lhs: '' },
                  inputType: 'text',
                  key: 'lhs',
                  label: 'Variable to compare',
                  type: 'text_auto',
                  validation: 'required',
                },
                {
                  data: {
                    conditions: [
                      {
                        alias: '',
                        case_sensitive: false,
                        match_substring: false,
                        operation: '==',
                        rhs: '',
                      },
                    ],
                  },
                  inputType: 'condition',
                  key: 'conditions',
                  label: '',
                  type: 'conditions',
                  validation: '',
                },
              ],
              output_states: [{ default: true, id: 'no_match', name: 'No Match', selected: true }],
            },
            description: 'Split the phlo based on user-defined conditions',
            error: {
              errorClass: '',
              errorMessage: '',
              errorShowClass: '',
              errorTextClass: '',
              errors: {},
              isSaveErrored: false,
            },
            icon: 'https://d2wsqfbujo4jlg.cloudfront.net/component_icons/branch_FFB012.svg',
            input: true,
            name: 'Branch',
            node_vars: { _component: [] },
            summary: { isShownClass: 'none', text: '' },
            tip: { title: 'Drag and Drop nodes' },
            type: 'branch',
          },
          {
            class: 'component',
            color: '#3F51B5',
            component: 'businesshour',
            config: {
              dynamic_states: true,
              model: [
                {
                  data: { name: null },
                  inputType: 'text',
                  label: 'Name',
                  type: 'text',
                  validation: 'required',
                },
                {
                  data: { business_hrs: null },
                  inputType: 'list',
                  key: 'business_hrs',
                  label: 'Select Business hour',
                  type: 'business_hrs',
                  validation: '',
                },
              ],
              output_states: [{ default: true, id: 'no_match', name: 'No Match', selected: true }],
            },
            description: 'Allow setting up operating hours',
            error: {
              errorClass: '',
              errorMessage: '',
              errorShowClass: '',
              errorTextClass: '',
              errors: {},
              isSaveErrored: false,
            },
            icon: 'https://d2wsqfbujo4jlg.cloudfront.net/component_icons/business_hour_FFB012.svg',
            input: true,
            name: 'Business Hours',
            node_vars: { _component: ['state'] },
            summary: { isShownClass: 'none', text: '' },
            tip: { title: 'Drag and Drop nodes' },
            type: 'business_hour',
          },
        ],
      },
    ],
    template: {
      props: ['data', 'componentColor'],
      template:
        '<li v-bind:flow-node-type="data.class" v-bind:data-node="data.type">\n    <div class="node-container-palettes phlo-component _palette-item"\n      :style="\'border:1px solid \' + componentColor">\n        <div class="text-area">\n          <div class="component-info">\n              <span :class="data.type"> </span>\n              <span class="__comp-name">\n                  {{data.name}}\n              </span>\n          </div>\n        </div>\n    </div>\n</li>',
    },
  },
  errors: null,
}
